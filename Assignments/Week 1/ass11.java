class A
{
	public static void main(String[] args) 
	{
		System.out.println("Hello world");
	}
}

/*

Steps for compilation and execution are as following : 

Compilation
First, the source ‘.java’ file is passed through the compiler, which 
then encodes the source code into a machine independent encoding, 
known as Bytecode. The content of each class contained in the source 
file is stored in a separate ‘.class’ file. While converting the source 
code into the bytecode, the compiler follows the following steps:

-> Parse: Reads a set of *.java source files and maps the resulting 
          token sequence into AST (Abstract Syntax Tree)-Nodes.

-> Enter: Enters symbols for the definitions into the symbol table.

-> Process annotations: If Requested, processes annotations found in
						the specified compilation units.

-> Attribute: Attributes the Syntax trees. This step includes name 
			  resolution, type checking and constant folding.

-> Flow: Performs dataflow analysis on the trees from the previous step. 
		 This includes checks for assignments and reachability.

-> Desugar: Rewrites the AST and translates away some syntactic sugar.

-> Generate: Generates ‘.Class’ files.


Execution
The class files generated by the compiler are independent of the machine 
or the OS, which allows them to be run on any system. To run, the main 
class file (the class that contains the method main) is passed to the JVM,
 and then goes through three main stages before the final machine code is executed. 

*/